// energy-restore.service.ts
import { Injectable } from '@nestjs/common';
import { Cron, CronExpression } from '@nestjs/schedule';
import { UserService } from '../../users/user.service';
import {EnergyCacheService} from "../../cash/energy-cache.service";
import { Logger } from '@nestjs/common';

@Injectable()
export class EnergyRestoreService {
  private readonly logger = new Logger(EnergyRestoreService.name);

  constructor(
    private readonly energyCacheService: EnergyCacheService,
    private readonly userService: UserService,
  ) {}

  // –ö—Ä–æ–Ω, –∑–∞–ø—É—Å–∫–∞—é—â–∏–π—Å—è —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç (–ø—Ä–∏–º–µ—Ä)
  @Cron(CronExpression.EVERY_5_MINUTES)
  async restoreEnergy() {
    this.logger.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏...');
    const userIds = this.energyCacheService.getAllUserIds();

    for (const userId of userIds) {
      const cacheData = this.energyCacheService.getUserCache(userId);
      if (!cacheData) continue;

      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î (currentEnergy, maxEnergy)
      const user = await this.userService.getUser(userId);

      // –î–ª—è –∫–∞–∂–¥–æ–≥–æ spentTime –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 8 —á–∞—Å–æ–≤
      const now = new Date();
      const eightHours = 8 * 60 * 60 * 1000;

      let updated = false;
      const newSpentTimes = [];

      for (const spentTime of cacheData.spentTimes) {
        const diff = now.getTime() - spentTime.getTime();
        if (diff >= eightHours) {
          // –ü—Ä–æ—à–ª–æ 8 —á–∞—Å–æ–≤, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 1 —ç–Ω–µ—Ä–≥–∏—é
          if (user.energyCurrent < user.energyMax) {
            user.energyCurrent++;
            updated = true;
          }
          // –ï—Å–ª–∏ energyCurrent == energyMax, –º—ã –Ω–µ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ–º —Å–≤–µ—Ä—Ö –ª–∏–º–∏—Ç–∞
          // –∑–Ω–∞—á–∏—Ç –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º spentTime –≤ newSpentTimes
        } else {
          // –ï—â—ë –Ω–µ –ø—Ä–æ—à–ª–æ 8 —á–∞—Å–æ–≤, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å
          newSpentTimes.push(spentTime);
        }
      }

      // –ï—Å–ª–∏ –±—ã–ª–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
      if (updated) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ–º –ª–∏ maxEnergy (—É—á–∏—Ç—ã–≤–∞—è, —á—Ç–æ maxEnergy –º–æ–∂–µ—Ç —É–º–µ–Ω—å—à–∏—Ç—å—Å—è)
        if (user.energyCurrent > user.energyMax) {
          user.energyCurrent = user.energyMax;
        }
        await this.userService.saveUser(user);
      }

      // –ï—Å–ª–∏ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –º–∞—Å—Å–∏–≤ –ø—É—Å—Ç–æ–π –ò–õ–ò user.energyCurrent == maxEnergy
      // —Ç–æ –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫—ç—à–∞
      if (newSpentTimes.length === 0 || user.energyCurrent === user.energyMax) {
        this.energyCacheService.removeUser(userId);
      } else {
        // –ò–Ω–∞—á–µ –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ spentTimes
        this.energyCacheService.updateUserCache(userId, { spentTimes: newSpentTimes, currentEnergy: user.energyCurrent });
      }
    }

    this.logger.log('‚úÖ –ó–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏.');
  }
}
